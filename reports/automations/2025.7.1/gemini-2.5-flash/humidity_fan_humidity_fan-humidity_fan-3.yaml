---
uuid: ef5f2bcb-5f41-4fe8-ae45-b0aec891926a
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: gemini-2.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turns on a fan when the humidity level rises above a specified threshold and turns it off when the humidity drops below that threshold.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity Sensor).
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold (%)
        description: The humidity percentage at which the fan should turn on/off.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider
            step: 1
            initial: 60 # Default to 60% as per example use case
      fan_entity:
        name: Fan Entity
        description: The fan entity to control (e.g., Bathroom Exhaust Fan).
        selector:
          entity:
            domain: fan

  mode: single
  max_exceeded: silent

  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: "humidity_high" # Identifier for the trigger when humidity goes above the level

    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: "humidity_low" # Identifier for the trigger when humidity goes below the level

  action:
    - choose:
        # Action to turn on the fan when humidity is high
        - conditions:
            - condition: trigger
              id: "humidity_high"
            - condition: state # Only turn on if the fan is currently off
              entity_id: !input fan_entity
              state: "off"
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              data: {} # No additional data needed for simple turn_on

        # Action to turn off the fan when humidity is low
        - conditions:
            - condition: trigger
              id: "humidity_low"
            - condition: state # Only turn off if the fan is currently on
              entity_id: !input fan_entity
              state: "on"
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEJFAPJH5RFGVHEV1Y04Y3E
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:34:13.842211+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:34:13. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan
            description: Turns on a fan when the humidity level rises above a specified threshold and turns it off when the humidity drops below that threshold.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity Sensor).
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold (%)
                description: The humidity percentage at which the fan should turn on/off.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider
                    step: 1
                    initial: 60 # Default to 60% as per example use case
              fan_entity:
                name: Fan Entity
                description: The fan entity to control (e.g., Bathroom Exhaust Fan).
                selector:
                  entity:
                    domain: fan

          mode: single
          max_exceeded: silent

          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: "humidity_high" # Identifier for the trigger when humidity goes above the level

            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: "humidity_low" # Identifier for the trigger when humidity goes below the level

          action:
            - choose:
                # Action to turn on the fan when humidity is high
                - conditions:
                    - condition: trigger
                      id: "humidity_high"
                    - condition: state # Only turn on if the fan is currently off
                      entity_id: !input fan_entity
                      state: "off"
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                      data: {} # No additional data needed for simple turn_on

                # Action to turn off the fan when humidity is low
                - conditions:
                    - condition: trigger
                      id: "humidity_low"
                    - condition: state # Only turn off if the fan is currently on
                      entity_id: !input fan_entity
                      state: "on"
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:34:13.843570+00:00
  duration_ms: 11265.18
  tries: 1
