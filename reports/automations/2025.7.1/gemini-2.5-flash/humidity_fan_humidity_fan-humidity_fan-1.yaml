---
uuid: 4ab3c75b-66fc-43e6-9cb3-8d4806428ad4
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: gemini-2.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: Turns on a fan when humidity rises above a set level, and turns it off when it falls below that level.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity).
        selector:
          entity:
            domain: sensor
            device_class: humidity # Recommends sensors with a humidity device class for better filtering.
      humidity_level:
        name: Humidity Threshold (%)
        description: The humidity percentage (%) at which the fan should turn on (above) or off (below).
        default: 60 # A common default for bathroom humidity
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%"
            mode: slider
      fan_entity:
        name: Fan Entity
        description: The fan entity to control (e.g., Bathroom Exhaust Fan).
        selector:
          entity:
            domain: fan

  mode: single # Ensures that the automation runs one execution at a time. If it's already running, new triggers are ignored.

  trigger:
    # Trigger when humidity goes above the specified level (to turn on the fan)
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: "humidity_high" # Unique ID for this trigger
    # Trigger when humidity goes below the specified level (to turn off the fan)
    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: "humidity_low" # Unique ID for this trigger

  action:
    # Use a choose action to differentiate between the two triggers (high vs. low humidity)
    - choose:
        # Action block for when humidity goes above the threshold
        - conditions:
            - condition: trigger
              id: "humidity_high"
          sequence:
            # Condition: Only turn on the fan if it is currently off
            - condition: state
              entity_id: !input fan_entity
              state: "off"
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              # You can add fan speed/percentage here if your fan supports it, e.g.:
              # data:
              #   percentage: 100
              #   preset_mode: "On" # Or "High" etc., depending on fan model
              # Note: For simplicity, this blueprint only uses turn_on/turn_off.

        # Action block for when humidity goes below the threshold
        - conditions:
            - condition: trigger
              id: "humidity_low"
          sequence:
            # Condition: Only turn off the fan if it is currently on
            - condition: state
              entity_id: !input fan_entity
              state: "on"
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEJEJP3A8HK6EX5HYEWJNVW
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:33:49.251407+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:33:49. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: Turns on a fan when humidity rises above a set level, and turns it off when it falls below that level.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity).
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity # Recommends sensors with a humidity device class for better filtering.
              humidity_level:
                name: Humidity Threshold (%)
                description: The humidity percentage (%) at which the fan should turn on (above) or off (below).
                default: 60 # A common default for bathroom humidity
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%"
                    mode: slider
              fan_entity:
                name: Fan Entity
                description: The fan entity to control (e.g., Bathroom Exhaust Fan).
                selector:
                  entity:
                    domain: fan

          mode: single # Ensures that the automation runs one execution at a time. If it's already running, new triggers are ignored.

          trigger:
            # Trigger when humidity goes above the specified level (to turn on the fan)
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: "humidity_high" # Unique ID for this trigger
            # Trigger when humidity goes below the specified level (to turn off the fan)
            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: "humidity_low" # Unique ID for this trigger

          action:
            # Use a choose action to differentiate between the two triggers (high vs. low humidity)
            - choose:
                # Action block for when humidity goes above the threshold
                - conditions:
                    - condition: trigger
                      id: "humidity_high"
                  sequence:
                    # Condition: Only turn on the fan if it is currently off
                    - condition: state
                      entity_id: !input fan_entity
                      state: "off"
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                      # You can add fan speed/percentage here if your fan supports it, e.g.:
                      # data:
                      #   percentage: 100
                      #   preset_mode: "On" # Or "High" etc., depending on fan model
                      # Note: For simplicity, this blueprint only uses turn_on/turn_off.

                # Action block for when humidity goes below the threshold
                - conditions:
                    - condition: trigger
                      id: "humidity_low"
                  sequence:
                    # Condition: Only turn off the fan if it is currently on
                    - condition: state
                      entity_id: !input fan_entity
                      state: "on"
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:33:49.252761+00:00
  duration_ms: 12733.352
  tries: 1
