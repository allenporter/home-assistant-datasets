---
uuid: 65dd32d1-1209-4632-8918-6fd4c99139b3
task_id: humidity_fan_humidity_fan-humidity_fan-0
model_id: gemini-2.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: Turns a fan on when humidity rises above a set level and off when it falls below.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity).
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Level (%)
        description: The humidity percentage level at which to turn the fan on/off.
        default: 60
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%"
            mode: slider
      fan_entity:
        name: Fan Entity
        description: The fan entity to control (e.g., Bathroom Exhaust Fan).
        selector:
          entity:
            domain: fan
    source_url: https://community.home-assistant.io/t/humidity-fan-control/example

  mode: single

  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: turn_on_fan
      # The automation triggers when the sensor goes above the threshold.
      # The 'for' option is not used here to ensure quick response,
      # but could be added if momentary spikes are an issue.

    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: turn_off_fan
      # The automation triggers when the sensor goes below the threshold.

  action:
    - choose:
        # Action to turn on the fan when humidity goes above the set level.
        - conditions:
            - condition: trigger
              id: turn_on_fan
            - condition: state # Only try to turn on if the fan is currently off.
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity

        # Action to turn off the fan when humidity goes below the set level.
        - conditions:
            - condition: trigger
              id: turn_off_fan
            - condition: state # Only try to turn off if the fan is currently on.
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEJE9A1JZVNWJBRAERFX8VH
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:33:39.649782+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:33:39. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: Turns a fan on when humidity rises above a set level and off when it falls below.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor that triggers the automation (e.g., Bathroom Humidity).
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Level (%)
                description: The humidity percentage level at which to turn the fan on/off.
                default: 60
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%"
                    mode: slider
              fan_entity:
                name: Fan Entity
                description: The fan entity to control (e.g., Bathroom Exhaust Fan).
                selector:
                  entity:
                    domain: fan
            source_url: https://community.home-assistant.io/t/humidity-fan-control/example

          mode: single

          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: turn_on_fan
              # The automation triggers when the sensor goes above the threshold.
              # The 'for' option is not used here to ensure quick response,
              # but could be added if momentary spikes are an issue.

            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: turn_off_fan
              # The automation triggers when the sensor goes below the threshold.

          action:
            - choose:
                # Action to turn on the fan when humidity goes above the set level.
                - conditions:
                    - condition: trigger
                      id: turn_on_fan
                    - condition: state # Only try to turn on if the fan is currently off.
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity

                # Action to turn off the fan when humidity goes below the set level.
                - conditions:
                    - condition: trigger
                      id: turn_off_fan
                    - condition: state # Only try to turn off if the fan is currently on.
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:33:39.651128+00:00
  duration_ms: 8998.544
  tries: 1
