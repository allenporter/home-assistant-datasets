---
uuid: d2e631ff-af79-402c-b832-ff22d851abb1
task_id: light_on_door_light_on_door-light_on_door-4
model_id: gemini-2.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door Open
    description: Turns on a light when a door opens, and turns it off when the door closes or after a 2-minute timeout.
    domain: automation
    source_url: https://community.home-assistant.io/t/light-on-door-open/xxxxx # Placeholder for community topic URL

    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor for the door (e.g., contact sensor, motion sensor).
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light(s) to Control
        description: The light entity or entities to turn on/off.
        selector:
          target:
            entity:
              domain: light

  mode: single

  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: "off"
      to: "on"
      id: "door_opened"

  action:
    - service: light.turn_on
      target: !input light_switch
      data: {} # No specific data needed for simple turn_on

    - wait_for_trigger:
        - platform: state
          entity_id: !input door_sensor
          from: "on"
          to: "off"
          id: "door_closed"
      timeout: "00:02:00" # 2-minute timeout
      continue_on_timeout: true # Important: Ensures the automation proceeds to turn off the light even if it times out

    - service: light.turn_off
      target: !input light_switch
      data: {} # No specific data needed for simple turn_off
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JZEJH26ASX7HA6GNDE449N6B
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:35:10.666359+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:35:10. Today's date is 2025-07-05.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door Open
            description: Turns on a light when a door opens, and turns it off when the door closes or after a 2-minute timeout.
            domain: automation
            source_url: https://community.home-assistant.io/t/light-on-door-open/xxxxx # Placeholder for community topic URL

            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor for the door (e.g., contact sensor, motion sensor).
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light(s) to Control
                description: The light entity or entities to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light

          mode: single

          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: "off"
              to: "on"
              id: "door_opened"

          action:
            - service: light.turn_on
              target: !input light_switch
              data: {} # No specific data needed for simple turn_on

            - wait_for_trigger:
                - platform: state
                  entity_id: !input door_sensor
                  from: "on"
                  to: "off"
                  id: "door_closed"
              timeout: "00:02:00" # 2-minute timeout
              continue_on_timeout: true # Important: Ensures the automation proceeds to turn off the light even if it times out

            - service: light.turn_off
              target: !input light_switch
              data: {} # No specific data needed for simple turn_off
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:35:10.667702+00:00
  duration_ms: 4826.633
  tries: 1
