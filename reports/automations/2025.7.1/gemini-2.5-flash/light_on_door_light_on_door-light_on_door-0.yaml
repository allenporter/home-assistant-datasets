---
uuid: 08925cb7-2932-4851-81c7-59977a60a945
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gemini-2.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door Open
    description: Turns on a light when a door opens, and turns it off when the door closes or after a 2-minute timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor for the door (e.g., contact sensor).
        selector:
          entity:
            domain: binary_sensor
            # It's good practice to suggest device classes if applicable, but not restrict if user has custom ones
            # device_class: [door, opening] # This can be too restrictive for some setups
      light_switch:
        name: Light to Control
        description: One or more light entities to turn on/off.
        selector:
          target:
            entity:
              domain: light

  mode: single
  max_exceeded: silent

  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: 'off'
      to: 'on'
      id: door_opened

  action:
    - service: light.turn_on
      target: !input light_switch
      data: {} # No extra data needed for simple on

    - wait_for_trigger:
        - platform: state
          entity_id: !input door_sensor
          from: 'on'
          to: 'off'
          id: door_closed
      timeout:
        minutes: 2
      continue_on_timeout: true # Ensure the automation continues to turn off the light even if it times out

    - service: light.turn_off
      target: !input light_switch
      data: {} # No extra data needed for simple off
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JZEJG32AY27V1S6HM3CA0ABN
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:34:38.794432+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:34:38. Today's date is 2025-07-05.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door Open
            description: Turns on a light when a door opens, and turns it off when the door closes or after a 2-minute timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor for the door (e.g., contact sensor).
                selector:
                  entity:
                    domain: binary_sensor
                    # It's good practice to suggest device classes if applicable, but not restrict if user has custom ones
                    # device_class: [door, opening] # This can be too restrictive for some setups
              light_switch:
                name: Light to Control
                description: One or more light entities to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light

          mode: single
          max_exceeded: silent

          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: 'off'
              to: 'on'
              id: door_opened

          action:
            - service: light.turn_on
              target: !input light_switch
              data: {} # No extra data needed for simple on

            - wait_for_trigger:
                - platform: state
                  entity_id: !input door_sensor
                  from: 'on'
                  to: 'off'
                  id: door_closed
              timeout:
                minutes: 2
              continue_on_timeout: true # Ensure the automation continues to turn off the light even if it times out

            - service: light.turn_off
              target: !input light_switch
              data: {} # No extra data needed for simple off
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:34:38.796104+00:00
  duration_ms: 4342.503
  tries: 1
