---
uuid: 0a4d8908-3227-4708-9c32-13bd542fa033
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: gemini-2.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turns on a fan when humidity exceeds a specified level, and turns it off when humidity drops back below that level.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor entity that will trigger the automation (e.g., bathroom humidity sensor).
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold (%)
        description: The humidity level (in percent) above which the fan should turn on, and below which it should turn off.
        default: 60
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%"
      fan_entity:
        name: Fan Entity
        description: The fan entity to control (e.g., bathroom exhaust fan).
        selector:
          entity:
            domain: fan

  mode: single
  max_exceeded: silent

  trigger:
    - platform: state
      entity_id: !input humidity_sensor

  action:
    - choose:
        # Option 1: Turn fan ON if humidity is above the threshold and fan is currently off
        - conditions:
            # Check if the current humidity is above the specified level
            - condition: template
              value_template: "{{ trigger.to_state.state | is_number and trigger.to_state.state | float > inputs['humidity_level'] | float }}"
            # Check if the fan is currently off to avoid unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: "off"
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              data: {} # No specific fan speed data required unless specified
        # Option 2: Turn fan OFF if humidity is at or below the threshold and fan is currently on
        - conditions:
            # Check if the current humidity is at or below the specified level
            - condition: template
              value_template: "{{ trigger.to_state.state | is_number and trigger.to_state.state | float <= inputs['humidity_level'] | float }}"
            # Check if the fan is currently on to avoid unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: "on"
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
      default: [] # Do nothing if no conditions are met (e.g., humidity changed but didn't cross threshold, or fan is already in desired state)

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEJFPB6ENWR6D4Q6DXE6FVZ
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:34:25.766949+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:34:25. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan
            description: Turns on a fan when humidity exceeds a specified level, and turns it off when humidity drops back below that level.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor entity that will trigger the automation (e.g., bathroom humidity sensor).
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold (%)
                description: The humidity level (in percent) above which the fan should turn on, and below which it should turn off.
                default: 60
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%"
              fan_entity:
                name: Fan Entity
                description: The fan entity to control (e.g., bathroom exhaust fan).
                selector:
                  entity:
                    domain: fan

          mode: single
          max_exceeded: silent

          trigger:
            - platform: state
              entity_id: !input humidity_sensor

          action:
            - choose:
                # Option 1: Turn fan ON if humidity is above the threshold and fan is currently off
                - conditions:
                    # Check if the current humidity is above the specified level
                    - condition: template
                      value_template: "{{ trigger.to_state.state | is_number and trigger.to_state.state | float > inputs['humidity_level'] | float }}"
                    # Check if the fan is currently off to avoid unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: "off"
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                      data: {} # No specific fan speed data required unless specified
                # Option 2: Turn fan OFF if humidity is at or below the threshold and fan is currently on
                - conditions:
                    # Check if the current humidity is at or below the specified level
                    - condition: template
                      value_template: "{{ trigger.to_state.state | is_number and trigger.to_state.state | float <= inputs['humidity_level'] | float }}"
                    # Check if the fan is currently on to avoid unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: "on"
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
              default: [] # Do nothing if no conditions are met (e.g., humidity changed but didn't cross threshold, or fan is already in desired state)

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:34:25.768338+00:00
  duration_ms: 12407.959
  tries: 1
