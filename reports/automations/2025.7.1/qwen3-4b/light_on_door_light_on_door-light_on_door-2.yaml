---
uuid: 721b2670-e864-4867-bd98-8216119032c7
task_id: light_on_door_light_on_door-light_on_door-2
model_id: qwen3-4b
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on door
    description: Turn on a light when the door opens and turn it off when the door closes or after a 2 minute timeout.
    inputs:
      door_sensor:
        friendly_name: Door Sensor
        type: binary_sensor
      light_switch:
        friendly_name: Light Switch
        type: light
        multiple: true
    steps:
      - id: door_open
        title: Door Open
        initial_state: false
        when:
          - condition: state
            entity_id: '{{ inputs.door_sensor }}'
            from: 'off'
            to: 'on'
        then:
          - service: light.turn_on
            target:
              entity_id: '{{ inputs.light_switch }}'
      - id: door_close
        title: Door Close
        initial_state: false
        when:
          - condition: state
            entity_id: '{{ inputs.door_sensor }}'
            from: 'on'
            to: 'off'
        then:
          - service: light.turn_off
            target:
              entity_id: '{{ inputs.light_switch }}'
      - id: timeout
        title: Timeout
        initial_state: false
        delay: 120
        when:
          - condition: state
            entity_id: '{{ inputs.door_sensor }}'
            from: 'on'
            to: 'off'
        then:
          - service: light.turn_off
            target:
              entity_id: '{{ inputs.light_switch }}'
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JZEJ56VSJQZH4BB0JH6PMXM7
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:28:42.233652+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:28:42. Today's date is 2025-07-05.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on door
            description: Turn on a light when the door opens and turn it off when the door closes or after a 2 minute timeout.
            inputs:
              door_sensor:
                friendly_name: Door Sensor
                type: binary_sensor
              light_switch:
                friendly_name: Light Switch
                type: light
                multiple: true
            steps:
              - id: door_open
                title: Door Open
                initial_state: false
                when:
                  - condition: state
                    entity_id: '{{ inputs.door_sensor }}'
                    from: 'off'
                    to: 'on'
                then:
                  - service: light.turn_on
                    target:
                      entity_id: '{{ inputs.light_switch }}'
              - id: door_close
                title: Door Close
                initial_state: false
                when:
                  - condition: state
                    entity_id: '{{ inputs.door_sensor }}'
                    from: 'on'
                    to: 'off'
                then:
                  - service: light.turn_off
                    target:
                      entity_id: '{{ inputs.light_switch }}'
              - id: timeout
                title: Timeout
                initial_state: false
                delay: 120
                when:
                  - condition: state
                    entity_id: '{{ inputs.door_sensor }}'
                    from: 'on'
                    to: 'off'
                then:
                  - service: light.turn_off
                    target:
                      entity_id: '{{ inputs.light_switch }}'
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:28:42.234954+00:00
  duration_ms: 8851.092
  tries: 1
