---
uuid: 38723dd9-b996-4b8d-a574-89670d680e18
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: qwen3-8b
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turn on a fan when humidity exceeds a set level and turn it off when humidity drops below that level.
    version: 1.0
    author: Home Assistant

  inputs:
    - name: humidity_sensor
      type: sensor
      description: A humidity sensor entity that triggers the automation.
    - name: humidity_level
      type: number
      description: The humidity level threshold to trigger the fan.
    - name: fan_entity
      type: fan
      description: The fan entity to control based on humidity levels.

  trigger:
    - platform: state
      entity_id: "{{ humidity_sensor }}"
      to: "{{ humidity_level }}"

  condition:
    - condition: template
      template: >
        states('{{ humidity_sensor }}') > states('{{ humidity_level }}')

  action:
    - service: fan.turn_on
      data:
        entity_id: "{{ fan_entity }}"
      condition: "{{ is_state(fan_entity, 'on') == false }}"

  mode: single

  - alias: Turn off fan when humidity drops below threshold
    trigger:
      - platform: state
        entity_id: "{{ humidity_sensor }}"
        to: "{{ humidity_level }}"
    condition:
      - condition: template
        template: >
          states('{{ humidity_sensor }}') < states('{{ humidity_level }}')
    action:
      - service: fan.turn_off
        data:
          entity_id: "{{ fan_entity }}"
        condition: "{{ is_state(fan_entity, 'off') == false }}"
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEV70HF8NGR9CGW4TWEQN0K
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 03:06:58.479715+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 20:06:58. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan
            description: Turn on a fan when humidity exceeds a set level and turn it off when humidity drops below that level.
            version: 1.0
            author: Home Assistant

          inputs:
            - name: humidity_sensor
              type: sensor
              description: A humidity sensor entity that triggers the automation.
            - name: humidity_level
              type: number
              description: The humidity level threshold to trigger the fan.
            - name: fan_entity
              type: fan
              description: The fan entity to control based on humidity levels.

          trigger:
            - platform: state
              entity_id: "{{ humidity_sensor }}"
              to: "{{ humidity_level }}"

          condition:
            - condition: template
              template: >
                states('{{ humidity_sensor }}') > states('{{ humidity_level }}')

          action:
            - service: fan.turn_on
              data:
                entity_id: "{{ fan_entity }}"
              condition: "{{ is_state(fan_entity, 'on') == false }}"

          mode: single

          - alias: Turn off fan when humidity drops below threshold
            trigger:
              - platform: state
                entity_id: "{{ humidity_sensor }}"
                to: "{{ humidity_level }}"
            condition:
              - condition: template
                template: >
                  states('{{ humidity_sensor }}') < states('{{ humidity_level }}')
            action:
              - service: fan.turn_off
                data:
                  entity_id: "{{ fan_entity }}"
                condition: "{{ is_state(fan_entity, 'off') == false }}"
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 03:06:58.481023+00:00
  duration_ms: 13759.913
  tries: 1
