---
uuid: ddfbc73f-e00c-48ae-96ed-712442a9fbaa
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: gemini-2.5-flash-lite
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turns on a fan when humidity rises above a set level and turns it off when it falls below.
    domain: automation
    source_url: https://github.com/your_username/your_repo/blob/main/humidity_fan.yaml # Replace with your actual URL
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: Select the humidity sensor to monitor.
        selector:
          entity:
            domain: sensor
            # We expect the state to be a number, which is usually the case for humidity sensors.
            # Filtering by device_class 'humidity' can also be a good practice if available.
            # device_class: humidity # Uncomment if you want to enforce this device class
      humidity_level:
        name: Humidity Level
        description: The humidity percentage to trigger the fan.
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%"
            mode: slider
      fan_entity:
        name: Fan Entity
        description: Select the fan to control.
        selector:
          entity:
            domain: fan

  # Trigger when humidity goes above the specified level.
  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      # This trigger should only fire if the fan is currently off.
      # We will handle the turning on in the action.

  # Trigger when humidity goes below the specified level.
  # This will be used to turn the fan off.
  - platform: numeric_state
    entity_id: !input humidity_sensor
    below: !input humidity_level
    # This trigger should only fire if the fan is currently on.
    # We will handle the turning off in the action.

  # Actions to perform when triggered.
  action:
    # If the humidity is above the level, turn the fan on.
    - choose:
        # If the humidity sensor is above the humidity level...
        - conditions:
            - condition: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
          sequence:
            # ...and the fan is not already on, turn it on.
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              data: {}
        # If the humidity sensor is below the humidity level...
        - conditions:
            - condition: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
          sequence:
            # ...and the fan is not already off, turn it off.
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
              data: {}
      # This default case handles situations where the trigger might have fired
      # but the conditions inside the choose statement are not met (e.g., if the fan
      # state changed unexpectedly between the trigger and action).
      # In this simple case, we don't need a specific default action as the
      # conditions within the choose handle the desired state changes.
      default: []

  # This mode ensures that if the humidity fluctuates rapidly, the fan doesn't
  # keep turning on and off unnecessarily in quick succession.
  mode: single
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JZEJ5VYPB1B2GSM73QP45PQN
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-07-06 00:29:03.830347+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 17:29:03. Today's date is 2025-07-05.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan
            description: Turns on a fan when humidity rises above a set level and turns it off when it falls below.
            domain: automation
            source_url: https://github.com/your_username/your_repo/blob/main/humidity_fan.yaml # Replace with your actual URL
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: Select the humidity sensor to monitor.
                selector:
                  entity:
                    domain: sensor
                    # We expect the state to be a number, which is usually the case for humidity sensors.
                    # Filtering by device_class 'humidity' can also be a good practice if available.
                    # device_class: humidity # Uncomment if you want to enforce this device class
              humidity_level:
                name: Humidity Level
                description: The humidity percentage to trigger the fan.
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%"
                    mode: slider
              fan_entity:
                name: Fan Entity
                description: Select the fan to control.
                selector:
                  entity:
                    domain: fan

          # Trigger when humidity goes above the specified level.
          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              # This trigger should only fire if the fan is currently off.
              # We will handle the turning on in the action.

          # Trigger when humidity goes below the specified level.
          # This will be used to turn the fan off.
          - platform: numeric_state
            entity_id: !input humidity_sensor
            below: !input humidity_level
            # This trigger should only fire if the fan is currently on.
            # We will handle the turning off in the action.

          # Actions to perform when triggered.
          action:
            # If the humidity is above the level, turn the fan on.
            - choose:
                # If the humidity sensor is above the humidity level...
                - conditions:
                    - condition: numeric_state
                      entity_id: !input humidity_sensor
                      above: !input humidity_level
                  sequence:
                    # ...and the fan is not already on, turn it on.
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                      data: {}
                # If the humidity sensor is below the humidity level...
                - conditions:
                    - condition: numeric_state
                      entity_id: !input humidity_sensor
                      below: !input humidity_level
                  sequence:
                    # ...and the fan is not already off, turn it off.
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
                      data: {}
              # This default case handles situations where the trigger might have fired
              # but the conditions inside the choose statement are not met (e.g., if the fan
              # state changed unexpectedly between the trigger and action).
              # In this simple case, we don't need a specific default action as the
              # conditions within the choose handle the desired state changes.
              default: []

          # This mode ensures that if the humidity fluctuates rapidly, the fan doesn't
          # keep turning on and off unnecessarily in quick succession.
          mode: single
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-07-06 00:29:03.832051+00:00
  duration_ms: 2516.981
  tries: 1
