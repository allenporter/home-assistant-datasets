---
uuid: 4b82e94f-03c5-4499-941e-f36dfa97bf2e
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: qwen3-30b-gptq
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Automation
    description: Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below.
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity that monitors humidity.
        type: entity
        domain: sensor
      humidity_level:
        name: Humidity Threshold
        description: The humidity level (as a percentage) that triggers the fan.
        type: number
      fan_entity:
        name: Fan Entity
        description: The fan entity to control based on humidity.
        type: entity
        domain: fan
    triggers:
      - platform: state
        entity_id: '{{ input.humidity_sensor }}'
        to: '{{ input.humidity_level }}'
        for:
          minutes: 1
    conditions:
      - condition: template
        value_template: "{{ (input.humidity_sensor | float) > (input.humidity_level | float) }}"
    actions:
      - choose:
          - condition:
              condition: state
              entity_id: '{{ input.fan_entity }}'
              state: 'on'
            sequence:
              - service: fan.turn_off
                target:
                  entity_id: '{{ input.fan_entity }}'
          - condition:
              condition: state
              entity_id: '{{ input.fan_entity }}'
              state: 'off'
            sequence:
              - service: fan.turn_on
                target:
                  entity_id: '{{ input.fan_entity }}'
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JW2NDBD7NZNZYYDPDX28XR3Y
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-25 02:47:36.103160+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 19:47:36. Today's date is 2025-05-24.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Automation
            description: Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below.
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity that monitors humidity.
                type: entity
                domain: sensor
              humidity_level:
                name: Humidity Threshold
                description: The humidity level (as a percentage) that triggers the fan.
                type: number
              fan_entity:
                name: Fan Entity
                description: The fan entity to control based on humidity.
                type: entity
                domain: fan
            triggers:
              - platform: state
                entity_id: '{{ input.humidity_sensor }}'
                to: '{{ input.humidity_level }}'
                for:
                  minutes: 1
            conditions:
              - condition: template
                value_template: "{{ (input.humidity_sensor | float) > (input.humidity_level | float) }}"
            actions:
              - choose:
                  - condition:
                      condition: state
                      entity_id: '{{ input.fan_entity }}'
                      state: 'on'
                    sequence:
                      - service: fan.turn_off
                        target:
                          entity_id: '{{ input.fan_entity }}'
                  - condition:
                      condition: state
                      entity_id: '{{ input.fan_entity }}'
                      state: 'off'
                    sequence:
                      - service: fan.turn_on
                        target:
                          entity_id: '{{ input.fan_entity }}'
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-05-25 02:47:36.104650+00:00
  duration_ms: 3123.631
  tries: 1
