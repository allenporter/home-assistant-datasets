---
uuid: 44be62e6-c965-4515-9c3e-793257ae794a
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: qwen3-30b-gptq
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  input_boolean:
    fan_automation_enabled:
      name: "Enable Fan Automation"
      icon: 'mdi:fan'

  input_number:
    humidity_threshold:
      name: "Humidity Threshold (%RH)"
      min: 0
      max: 100
      step: 1
      unit_of_measurement: '%'

  input_entity:
    humidity_sensor:
      name: "Humidity Sensor"
      domain: sensor
      optional: false

  input_entity:
    fan_to_control:
      name: "Fan to Control"
      domain: fan
      optional: false

  blueprint:
    name: "Humidity Fan Control"
    description: "Automatically turn on and off a fan based on humidity levels."
    category: "automation"
    input:
      fan_automation_enabled:
        name: "Enable Fan Automation"
        description: "Enable or disable the fan automation."
      humidity_threshold:
        name: "Humidity Threshold"
        description: "The humidity level (in %RH) at which the fan should be turned on."
      humidity_sensor:
        name: "Humidity Sensor"
        description: "The sensor that measures the humidity."
      fan_to_control:
        name: "Fan to Control"
        description: "The fan to be controlled based on humidity levels."

    triggers:
      - platform: state
        entity_id: '{{ input.humidity_sensor }}'
        to: >-
          {{ input.humidity_threshold | int + 1 }}
        from: >-
          {{ input.humidity_threshold | int }}
        for:
          minutes: 1

    conditions:
      - condition: template
        value_template: "{{ is_state('{{ input.fan_to_control }}', 'on') }}"

    actions:
      - choose:
          - condition:
              condition: template
              value_template: "{{ trigger.to_state.state > trigger.from_state.state }}"
            sequence:
              - service: fan.turn_on
                target:
                  entity_id: '{{ input.fan_to_control }}'
          - condition:
              condition: template
              value_template: "{{ trigger.to_state.state < trigger.from_state.state }}"
            sequence:
              - service: fan.turn_off
                target:
                  entity_id: '{{ input.fan_to_control }}'
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JW2NDM0BYY5D1G8FN1Y1Y3C1
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-25 02:47:44.907286+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 19:47:44. Today's date is 2025-05-24.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          input_boolean:
            fan_automation_enabled:
              name: "Enable Fan Automation"
              icon: 'mdi:fan'

          input_number:
            humidity_threshold:
              name: "Humidity Threshold (%RH)"
              min: 0
              max: 100
              step: 1
              unit_of_measurement: '%'

          input_entity:
            humidity_sensor:
              name: "Humidity Sensor"
              domain: sensor
              optional: false

          input_entity:
            fan_to_control:
              name: "Fan to Control"
              domain: fan
              optional: false

          blueprint:
            name: "Humidity Fan Control"
            description: "Automatically turn on and off a fan based on humidity levels."
            category: "automation"
            input:
              fan_automation_enabled:
                name: "Enable Fan Automation"
                description: "Enable or disable the fan automation."
              humidity_threshold:
                name: "Humidity Threshold"
                description: "The humidity level (in %RH) at which the fan should be turned on."
              humidity_sensor:
                name: "Humidity Sensor"
                description: "The sensor that measures the humidity."
              fan_to_control:
                name: "Fan to Control"
                description: "The fan to be controlled based on humidity levels."

            triggers:
              - platform: state
                entity_id: '{{ input.humidity_sensor }}'
                to: >-
                  {{ input.humidity_threshold | int + 1 }}
                from: >-
                  {{ input.humidity_threshold | int }}
                for:
                  minutes: 1

            conditions:
              - condition: template
                value_template: "{{ is_state('{{ input.fan_to_control }}', 'on') }}"

            actions:
              - choose:
                  - condition:
                      condition: template
                      value_template: "{{ trigger.to_state.state > trigger.from_state.state }}"
                    sequence:
                      - service: fan.turn_on
                        target:
                          entity_id: '{{ input.fan_to_control }}'
                  - condition:
                      condition: template
                      value_template: "{{ trigger.to_state.state < trigger.from_state.state }}"
                    sequence:
                      - service: fan.turn_off
                        target:
                          entity_id: '{{ input.fan_to_control }}'
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-05-25 02:47:44.908691+00:00
  duration_ms: 4552.333
  tries: 1
