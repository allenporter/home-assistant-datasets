---
uuid: 447ce674-1736-4f94-a76c-6c30c802e13f
task_id: light_on_door_light_on_door-light_on_door-0
model_id: qwen3-30b-gptq
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  description: "Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes."
  input:
    door_sensor:
      name: "Door Sensor"
      description: "The binary sensor that detects when the door opens."
      selector:
        entity:
          domain: binary_sensor
    light_switch:
      name: "Light Switch"
      description: "The light(s) to turn on when the door opens."
      selector:
        entity:
          domain: light

  trigger:
    - platform: state
      to: "on"
      for:
        hours: 0
        minutes: 2
        seconds: 0
      condition:
        - condition: template
          value_template: "{{ trigger.event.data.to_state.state == 'on' }}"
      entity_id: "{{ input_door_sensor }}"

  action:
    - service: light.turn_on
      target:
        entity_id: "{{ input_light_switch }}"
    - wait for: "{{ 2 * 60 }} seconds"
    - service: light.turn_off
      target:
        entity_id: "{{ input_light_switch }}"
    - service: light.turn_on
      target:
        entity_id: "{{ input_light_switch }}"
      condition:
        - condition: state
          entity_id: "{{ input_door_sensor }}"
          state: "on"

  mode: single
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JW2NDW2NSHCB2VX4W57J7EF8
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-25 02:47:53.173177+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
          Current time is 19:47:53. Today's date is 2025-05-24.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          description: "Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes."
          input:
            door_sensor:
              name: "Door Sensor"
              description: "The binary sensor that detects when the door opens."
              selector:
                entity:
                  domain: binary_sensor
            light_switch:
              name: "Light Switch"
              description: "The light(s) to turn on when the door opens."
              selector:
                entity:
                  domain: light

          trigger:
            - platform: state
              to: "on"
              for:
                hours: 0
                minutes: 2
                seconds: 0
              condition:
                - condition: template
                  value_template: "{{ trigger.event.data.to_state.state == 'on' }}"
              entity_id: "{{ input_door_sensor }}"

          action:
            - service: light.turn_on
              target:
                entity_id: "{{ input_light_switch }}"
            - wait for: "{{ 2 * 60 }} seconds"
            - service: light.turn_off
              target:
                entity_id: "{{ input_light_switch }}"
            - service: light.turn_on
              target:
                entity_id: "{{ input_light_switch }}"
              condition:
                - condition: state
                  entity_id: "{{ input_door_sensor }}"
                  state: "on"

          mode: single
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-05-25 02:47:53.174593+00:00
  duration_ms: 2795.368
  tries: 1
