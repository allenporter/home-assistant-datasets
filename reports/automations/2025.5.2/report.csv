task_id,model_id,category,text,tool_call,response,task_name,label,details
"door_left_open_door_left_open-door_left_open-0","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\ndescription: 'Play an alert on the speaker when the door is left open.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    selector:\n      media:\n        domain: media_player\n  open_duration:\n    name: 'Open Duration'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    entity_id: '{{ input.door_sensor }}'\n    from: 'closed'\n    to: 'open'\n    for:\n      minutes: '{{ input.open_duration | int }}'\ncondition: []\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '{{ input.alert_media }}'\n    data:\n      media_content_id: 'alert'\n      media_content_type: 'alert'\nmode: single\n```","door_left_open-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"door_left_open_door_left_open-door_left_open-0","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\ndescription: 'Play an alert on the speaker when the door is left open.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    selector:\n      media:\n        domain: media_player\n  open_duration:\n    name: 'Open Duration'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    entity_id: '{{ input.door_sensor }}'\n    from: 'closed'\n    to: 'open'\n    for:\n      minutes: '{{ input.open_duration | int }}'\ncondition: []\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '{{ input.alert_media }}'\n    data:\n      media_content_id: 'alert'\n      media_content_type: 'alert'\nmode: single\n```","door_left_open-test_door_open_plays_media","Bad","AssertionError: Unable to load automation."
"door_left_open_door_left_open-door_left_open-1","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\n# Door left open blueprint\nname: 'Door left open'\ndescription: 'Play an alert on the speaker when the door is left open.'\ncategory: 'automation'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'A binary sensor entity that detects if the door is open.'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    description: 'The media to play on the speaker when the door is left open.'\n    selector:\n      media:\n        domain: media_player\n  open_duration:\n    name: 'Open Duration'\n    description: 'The duration the door must remain open before the alert is played.'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    condition:\n      - condition: state\n        entity_id: '${input.door_sensor}'\n        state: 'open'\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '${input.alert_media}'\n    data:\n      media_content_type: 'sound'\n      media_content_id: 'alert'\n      title: 'Door left open'\n    description: 'Play the alert media on the specified speaker.'\n```","door_left_open-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"door_left_open_door_left_open-door_left_open-1","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\n# Door left open blueprint\nname: 'Door left open'\ndescription: 'Play an alert on the speaker when the door is left open.'\ncategory: 'automation'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'A binary sensor entity that detects if the door is open.'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    description: 'The media to play on the speaker when the door is left open.'\n    selector:\n      media:\n        domain: media_player\n  open_duration:\n    name: 'Open Duration'\n    description: 'The duration the door must remain open before the alert is played.'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    condition:\n      - condition: state\n        entity_id: '${input.door_sensor}'\n        state: 'open'\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '${input.alert_media}'\n    data:\n      media_content_type: 'sound'\n      media_content_id: 'alert'\n      title: 'Door left open'\n    description: 'Play the alert media on the specified speaker.'\n```","door_left_open-test_door_open_plays_media","Bad","AssertionError: Unable to load automation."
"door_left_open_door_left_open-door_left_open-2","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\nblueprint:\n  name: 'Door Left Open Alert'\n  description: 'Plays an alert on the selected speaker when a door has been left open for a specified duration.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor entity that detects if the door is open.'\n      selector:\n        entity:\n          domain: binary_sensor\n    alert_media:\n      name: 'Alert Media'\n      description: 'The media to play when the door is left open.'\n      selector:\n        media: {}\n    open_duration:\n      name: 'Open Duration'\n      description: 'The amount of time the door must be open before the alert is played.'\n      selector:\n        duration: {}\n  triggers:\n    - platform: state\n      entity_id: '{{ input.door_sensor }}'\n      to: 'on'\n  conditions:\n    - condition: time\n      after: '00:00:00'\n      before: '23:59:59'\n  actions:\n    - service: media_player/play_media\n      target:\n        entity_id: '{{ input.alert_media.entity_id }}'\n      data:\n        media_id: '{{ input.alert_media.media_id }}'\n        media_content_type: 'audio'\n  variables:\n    # This is where the variables would be used if needed\n```","door_left_open-test_blueprint_inputs","Good",""
"door_left_open_door_left_open-door_left_open-2","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\nblueprint:\n  name: 'Door Left Open Alert'\n  description: 'Plays an alert on the selected speaker when a door has been left open for a specified duration.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor entity that detects if the door is open.'\n      selector:\n        entity:\n          domain: binary_sensor\n    alert_media:\n      name: 'Alert Media'\n      description: 'The media to play when the door is left open.'\n      selector:\n        media: {}\n    open_duration:\n      name: 'Open Duration'\n      description: 'The amount of time the door must be open before the alert is played.'\n      selector:\n        duration: {}\n  triggers:\n    - platform: state\n      entity_id: '{{ input.door_sensor }}'\n      to: 'on'\n  conditions:\n    - condition: time\n      after: '00:00:00'\n      before: '23:59:59'\n  actions:\n    - service: media_player/play_media\n      target:\n        entity_id: '{{ input.alert_media.entity_id }}'\n      data:\n        media_id: '{{ input.alert_media.media_id }}'\n        media_content_type: 'audio'\n  variables:\n    # This is where the variables would be used if needed\n```","door_left_open-test_door_open_plays_media","Bad","AssertionError: Unable to load automation."
"door_left_open_door_left_open-door_left_open-3","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\ndescription: 'Play an alert on the speaker when the door is left open.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    selector:\n      media: {}\n  open_duration:\n    name: 'Open Duration'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    entity_id: '{{ input.door_sensor }}'\n    to: 'on'\n    for:\n      duration: '{{ input.open_duration }}'\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '{{ input.alert_media.entity_id }}'\n    data:\n      media_content_id: '{{ input.alert_media.media_id }}'\n      media_content_type: 'music'\nmode: single\n```","door_left_open-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"door_left_open_door_left_open-door_left_open-3","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\ndescription: 'Play an alert on the speaker when the door is left open.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    selector:\n      entity:\n        domain: binary_sensor\n  alert_media:\n    name: 'Alert Media'\n    selector:\n      media: {}\n  open_duration:\n    name: 'Open Duration'\n    selector:\n      duration: {}\ntrigger:\n  - platform: state\n    entity_id: '{{ input.door_sensor }}'\n    to: 'on'\n    for:\n      duration: '{{ input.open_duration }}'\naction:\n  - service: media_player/play_media\n    target:\n      entity_id: '{{ input.alert_media.entity_id }}'\n    data:\n      media_content_id: '{{ input.alert_media.media_id }}'\n      media_content_type: 'music'\nmode: single\n```","door_left_open-test_door_open_plays_media","Bad","AssertionError: Unable to load automation."
"door_left_open_door_left_open-door_left_open-4","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\nblueprint:\n  name: 'Door Left Open Alert'\n  description: 'Plays an alert on a speaker when a door has been left open for a specified duration.'\n  inputs:\n    door_sensor:\n      name: 'Door Sensor'\n      selector:\n        entity:\n          domain: binary_sensor\n      description: 'The binary sensor entity that detects if the door is open.'\n    alert_media:\n      name: 'Alert Media'\n      selector:\n        media:\n          media_player: true\n          media_id: true\n      description: 'The media to play on the speaker when the door is left open.'\n    open_duration:\n      name: 'Open Duration'\n      selector:\n        duration:\n          unit: minute\n      description: 'The duration in minutes the door must remain open before the alert is triggered.'\n\ntrigger:\n  - platform: state\n    to: 'open'\n    for:\n      minute: '{{ input_open_duration }}'\n    on_action:\n      - media_player.play_media:\n          entity_id: '{{ input_alert_media.media_player }}'\n          media_id: '{{ input_alert_media.media_id }}'\n```","door_left_open-test_blueprint_inputs","Bad","AssertionError"
"door_left_open_door_left_open-door_left_open-4","qwen3-30b-gptq","media_player","# Door left open\n\n## Problem statement\n\nCreate an blueprint automation to play an alert on the speaker when the door is\nleft open.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Play an message on the living room speaker if the garage door has been left open for more than 30 minutes\n- When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input           | Selector Type | Description                                                                           |\n| --------------- | ------------- | ------------------------------------------------------------------------------------- |\n| `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |\n| `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |\n| `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |\n\nThe automation should play the selected media when the door has been open for the specified duration.\n","","```yaml\nblueprint:\n  name: 'Door Left Open Alert'\n  description: 'Plays an alert on a speaker when a door has been left open for a specified duration.'\n  inputs:\n    door_sensor:\n      name: 'Door Sensor'\n      selector:\n        entity:\n          domain: binary_sensor\n      description: 'The binary sensor entity that detects if the door is open.'\n    alert_media:\n      name: 'Alert Media'\n      selector:\n        media:\n          media_player: true\n          media_id: true\n      description: 'The media to play on the speaker when the door is left open.'\n    open_duration:\n      name: 'Open Duration'\n      selector:\n        duration:\n          unit: minute\n      description: 'The duration in minutes the door must remain open before the alert is triggered.'\n\ntrigger:\n  - platform: state\n    to: 'open'\n    for:\n      minute: '{{ input_open_duration }}'\n    on_action:\n      - media_player.play_media:\n          entity_id: '{{ input_alert_media.media_player }}'\n          media_id: '{{ input_alert_media.media_id }}'\n```","door_left_open-test_door_open_plays_media","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-0","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Blueprint\n# This blueprint automates turning on and off a fan based on humidity sensor readings.\n\nblueprint:\n  name: 'Humidity Fan Automation'\n  description: 'Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\n  input:\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The humidity sensor entity that triggers the automation.'\n      selector:\n        sensor: {}\n    humidity_level:\n      name: 'Humidity Level'\n      description: 'The humidity threshold (in %) at which the fan should be activated.'\n      selector:\n        number: {}\n    fan_entity:\n      name: 'Fan Entity'\n      description: 'The fan entity to control based on humidity.'\n      selector:\n        fan: {}\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_above\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\n  - platform: state\n    to: 'off'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_below\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\naction:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'on'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_on\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'off'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_off\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n\nmode: single\n```","humidity_fan-test_blueprint_inputs","Good",""
"humidity_fan_humidity_fan-humidity_fan-0","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Blueprint\n# This blueprint automates turning on and off a fan based on humidity sensor readings.\n\nblueprint:\n  name: 'Humidity Fan Automation'\n  description: 'Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\n  input:\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The humidity sensor entity that triggers the automation.'\n      selector:\n        sensor: {}\n    humidity_level:\n      name: 'Humidity Level'\n      description: 'The humidity threshold (in %) at which the fan should be activated.'\n      selector:\n        number: {}\n    fan_entity:\n      name: 'Fan Entity'\n      description: 'The fan entity to control based on humidity.'\n      selector:\n        fan: {}\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_above\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\n  - platform: state\n    to: 'off'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_below\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\naction:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'on'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_on\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'off'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_off\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n\nmode: single\n```","humidity_fan-test_fan_triggered_on","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-0","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Blueprint\n# This blueprint automates turning on and off a fan based on humidity sensor readings.\n\nblueprint:\n  name: 'Humidity Fan Automation'\n  description: 'Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\n  input:\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The humidity sensor entity that triggers the automation.'\n      selector:\n        sensor: {}\n    humidity_level:\n      name: 'Humidity Level'\n      description: 'The humidity threshold (in %) at which the fan should be activated.'\n      selector:\n        number: {}\n    fan_entity:\n      name: 'Fan Entity'\n      description: 'The fan entity to control based on humidity.'\n      selector:\n        fan: {}\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_above\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\n  - platform: state\n    to: 'off'\n    for:\n      hours: 0\n      minutes: 1\n      seconds: 0\n    id: trigger_humidity_below\n    condition:\n      condition: template\n      value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n    entity_id: '{{ inputs.humidity_sensor }}'\n\naction:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'on'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int > (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_on\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n      - conditions:\n          - condition: template\n            value_template: '{{ inputs.humidity_level | int < 60 }}'\n          - conditions:\n              - condition: state\n                entity_id: '{{ inputs.fan_entity }}'\n                state: 'off'\n              - condition: template\n                value_template: '{{ trigger.event.data.to_state.attributes.humidity | int < (inputs.humidity_level | int) }}'\n          - then:\n              - service: fan.turn_off\n                target:\n                  entity_id: '{{ inputs.fan_entity }}'\n\nmode: single\n```","humidity_fan-test_fan_triggered_off","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-1","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nblueprint:\n  name: Humidity Fan Automation\n  description: Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below.\n  input:\n    humidity_sensor:\n      name: Humidity Sensor\n      description: The sensor entity that monitors humidity.\n      type: entity\n      domain: sensor\n    humidity_level:\n      name: Humidity Threshold\n      description: The humidity level (as a percentage) that triggers the fan.\n      type: number\n    fan_entity:\n      name: Fan Entity\n      description: The fan entity to control based on humidity.\n      type: entity\n      domain: fan\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: '{{ input.humidity_level }}'\n      for:\n        minutes: 1\n  conditions:\n    - condition: template\n      value_template: '{{ (input.humidity_sensor | float) > (input.humidity_level | float) }}'\n  actions:\n    - choose:\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'on'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_entity }}'\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'off'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_entity }}'\n```","humidity_fan-test_blueprint_inputs","Good",""
"humidity_fan_humidity_fan-humidity_fan-1","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nblueprint:\n  name: Humidity Fan Automation\n  description: Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below.\n  input:\n    humidity_sensor:\n      name: Humidity Sensor\n      description: The sensor entity that monitors humidity.\n      type: entity\n      domain: sensor\n    humidity_level:\n      name: Humidity Threshold\n      description: The humidity level (as a percentage) that triggers the fan.\n      type: number\n    fan_entity:\n      name: Fan Entity\n      description: The fan entity to control based on humidity.\n      type: entity\n      domain: fan\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: '{{ input.humidity_level }}'\n      for:\n        minutes: 1\n  conditions:\n    - condition: template\n      value_template: '{{ (input.humidity_sensor | float) > (input.humidity_level | float) }}'\n  actions:\n    - choose:\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'on'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_entity }}'\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'off'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_entity }}'\n```","humidity_fan-test_fan_triggered_on","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-1","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nblueprint:\n  name: Humidity Fan Automation\n  description: Automatically turns on a fan when humidity exceeds a set level and turns it off when it drops below.\n  input:\n    humidity_sensor:\n      name: Humidity Sensor\n      description: The sensor entity that monitors humidity.\n      type: entity\n      domain: sensor\n    humidity_level:\n      name: Humidity Threshold\n      description: The humidity level (as a percentage) that triggers the fan.\n      type: number\n    fan_entity:\n      name: Fan Entity\n      description: The fan entity to control based on humidity.\n      type: entity\n      domain: fan\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: '{{ input.humidity_level }}'\n      for:\n        minutes: 1\n  conditions:\n    - condition: template\n      value_template: '{{ (input.humidity_sensor | float) > (input.humidity_level | float) }}'\n  actions:\n    - choose:\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'on'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_entity }}'\n        - condition:\n            condition: state\n            entity_id: '{{ input.fan_entity }}'\n            state: 'off'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_entity }}'\n```","humidity_fan-test_fan_triggered_off","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-2","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Automation Blueprint\nname: 'Humidity Fan Automation'\ndescription: 'Turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\ninput:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    description: 'The sensor entity that measures humidity.'\n    selector:\n      sensor:\n        domain: sensor\n  humidity_level:\n    name: 'Humidity Threshold'\n    description: 'The humidity level (in %) that triggers the fan.'\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: 'Fan Entity'\n    description: 'The fan entity to control based on humidity.'\n    selector:\n      fan: {}\ntriggers:\n  - platform: state\n    to_state: 'on'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'on' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\n  - platform: state\n    to_state: 'off'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'off' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\nactions:\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity > humidity_level and state(fan_entity) == 'off' }}'\n    then:\n      - service: fan.turn_on\n        target:\n          entity_id: '{{ fan_entity }}'\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity < humidity_level and state(fan_entity) == 'on' }}'\n    then:\n      - service: fan.turn_off\n        target:\n          entity_id: '{{ fan_entity }}'\n```","humidity_fan-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"humidity_fan_humidity_fan-humidity_fan-2","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Automation Blueprint\nname: 'Humidity Fan Automation'\ndescription: 'Turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\ninput:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    description: 'The sensor entity that measures humidity.'\n    selector:\n      sensor:\n        domain: sensor\n  humidity_level:\n    name: 'Humidity Threshold'\n    description: 'The humidity level (in %) that triggers the fan.'\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: 'Fan Entity'\n    description: 'The fan entity to control based on humidity.'\n    selector:\n      fan: {}\ntriggers:\n  - platform: state\n    to_state: 'on'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'on' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\n  - platform: state\n    to_state: 'off'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'off' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\nactions:\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity > humidity_level and state(fan_entity) == 'off' }}'\n    then:\n      - service: fan.turn_on\n        target:\n          entity_id: '{{ fan_entity }}'\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity < humidity_level and state(fan_entity) == 'on' }}'\n    then:\n      - service: fan.turn_off\n        target:\n          entity_id: '{{ fan_entity }}'\n```","humidity_fan-test_fan_triggered_on","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-2","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\n# Humidity Fan Automation Blueprint\nname: 'Humidity Fan Automation'\ndescription: 'Turns on a fan when humidity exceeds a set level and turns it off when it drops below the level.'\ninput:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    description: 'The sensor entity that measures humidity.'\n    selector:\n      sensor:\n        domain: sensor\n  humidity_level:\n    name: 'Humidity Threshold'\n    description: 'The humidity level (in %) that triggers the fan.'\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: 'Fan Entity'\n    description: 'The fan entity to control based on humidity.'\n    selector:\n      fan: {}\ntriggers:\n  - platform: state\n    to_state: 'on'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'on' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\n  - platform: state\n    to_state: 'off'\n    for:\n      minutes: 0\n    condition:\n      condition: template\n      value_template: '{{ trigger.to_state == 'off' and trigger.variables.humidity_sensor is not none and trigger.variables.humidity_level is not none and trigger.variables.fan_entity is not none }}'\n    variables:\n      humidity_sensor: '{{ input.humidity_sensor }}'\n      humidity_level: '{{ input.humidity_level }}'\n      fan_entity: '{{ input.fan_entity }}'\n      current_humidity: '{{ state(humidity_sensor) | float }}'\n\nactions:\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity > humidity_level and state(fan_entity) == 'off' }}'\n    then:\n      - service: fan.turn_on\n        target:\n          entity_id: '{{ fan_entity }}'\n  - if:\n      condition:\n        condition: template\n        value_template: '{{ current_humidity < humidity_level and state(fan_entity) == 'on' }}'\n    then:\n      - service: fan.turn_off\n        target:\n          entity_id: '{{ fan_entity }}'\n```","humidity_fan-test_fan_triggered_off","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-3","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\ninput_boolean:\n  fan_automation_enabled:\n    name: 'Enable Fan Automation'\n    icon: 'mdi:fan'\n\ninput_number:\n  humidity_threshold:\n    name: 'Humidity Threshold (%RH)'\n    min: 0\n    max: 100\n    step: 1\n    unit_of_measurement: '%'\n\ninput_entity:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    domain: sensor\n    optional: false\n\ninput_entity:\n  fan_to_control:\n    name: 'Fan to Control'\n    domain: fan\n    optional: false\n\nblueprint:\n  name: 'Humidity Fan Control'\n  description: 'Automatically turn on and off a fan based on humidity levels.'\n  category: 'automation'\n  input:\n    fan_automation_enabled:\n      name: 'Enable Fan Automation'\n      description: 'Enable or disable the fan automation.'\n    humidity_threshold:\n      name: 'Humidity Threshold'\n      description: 'The humidity level (in %RH) at which the fan should be turned on.'\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The sensor that measures the humidity.'\n    fan_to_control:\n      name: 'Fan to Control'\n      description: 'The fan to be controlled based on humidity levels.'\n\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: >-\n        {{ input.humidity_threshold | int + 1 }}\n      from: >-\n        {{ input.humidity_threshold | int }}\n      for:\n        minutes: 1\n\n  conditions:\n    - condition: template\n      value_template: '{{ is_state('{{ input.fan_to_control }}', 'on') }}'\n\n  actions:\n    - choose:\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state > trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state < trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n```","humidity_fan-test_blueprint_inputs","Bad","AssertionError: Required input 'fan_entity' missing from blueprint"
"humidity_fan_humidity_fan-humidity_fan-3","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\ninput_boolean:\n  fan_automation_enabled:\n    name: 'Enable Fan Automation'\n    icon: 'mdi:fan'\n\ninput_number:\n  humidity_threshold:\n    name: 'Humidity Threshold (%RH)'\n    min: 0\n    max: 100\n    step: 1\n    unit_of_measurement: '%'\n\ninput_entity:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    domain: sensor\n    optional: false\n\ninput_entity:\n  fan_to_control:\n    name: 'Fan to Control'\n    domain: fan\n    optional: false\n\nblueprint:\n  name: 'Humidity Fan Control'\n  description: 'Automatically turn on and off a fan based on humidity levels.'\n  category: 'automation'\n  input:\n    fan_automation_enabled:\n      name: 'Enable Fan Automation'\n      description: 'Enable or disable the fan automation.'\n    humidity_threshold:\n      name: 'Humidity Threshold'\n      description: 'The humidity level (in %RH) at which the fan should be turned on.'\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The sensor that measures the humidity.'\n    fan_to_control:\n      name: 'Fan to Control'\n      description: 'The fan to be controlled based on humidity levels.'\n\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: >-\n        {{ input.humidity_threshold | int + 1 }}\n      from: >-\n        {{ input.humidity_threshold | int }}\n      for:\n        minutes: 1\n\n  conditions:\n    - condition: template\n      value_template: '{{ is_state('{{ input.fan_to_control }}', 'on') }}'\n\n  actions:\n    - choose:\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state > trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state < trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n```","humidity_fan-test_fan_triggered_on","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-3","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\ninput_boolean:\n  fan_automation_enabled:\n    name: 'Enable Fan Automation'\n    icon: 'mdi:fan'\n\ninput_number:\n  humidity_threshold:\n    name: 'Humidity Threshold (%RH)'\n    min: 0\n    max: 100\n    step: 1\n    unit_of_measurement: '%'\n\ninput_entity:\n  humidity_sensor:\n    name: 'Humidity Sensor'\n    domain: sensor\n    optional: false\n\ninput_entity:\n  fan_to_control:\n    name: 'Fan to Control'\n    domain: fan\n    optional: false\n\nblueprint:\n  name: 'Humidity Fan Control'\n  description: 'Automatically turn on and off a fan based on humidity levels.'\n  category: 'automation'\n  input:\n    fan_automation_enabled:\n      name: 'Enable Fan Automation'\n      description: 'Enable or disable the fan automation.'\n    humidity_threshold:\n      name: 'Humidity Threshold'\n      description: 'The humidity level (in %RH) at which the fan should be turned on.'\n    humidity_sensor:\n      name: 'Humidity Sensor'\n      description: 'The sensor that measures the humidity.'\n    fan_to_control:\n      name: 'Fan to Control'\n      description: 'The fan to be controlled based on humidity levels.'\n\n  triggers:\n    - platform: state\n      entity_id: '{{ input.humidity_sensor }}'\n      to: >-\n        {{ input.humidity_threshold | int + 1 }}\n      from: >-\n        {{ input.humidity_threshold | int }}\n      for:\n        minutes: 1\n\n  conditions:\n    - condition: template\n      value_template: '{{ is_state('{{ input.fan_to_control }}', 'on') }}'\n\n  actions:\n    - choose:\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state > trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_on\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n        - condition:\n            condition: template\n            value_template: '{{ trigger.to_state.state < trigger.from_state.state }}'\n          sequence:\n            - service: fan.turn_off\n              target:\n                entity_id: '{{ input.fan_to_control }}'\n```","humidity_fan-test_fan_triggered_off","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-4","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nname: Humidity Fan Control\ndescription: Automates a fan based on humidity levels from a sensor.\ninputs:\n  humidity_sensor:\n    name: Humidity Sensor\n    description: The sensor entity that measures humidity.\n    selector:\n      entity:\n        domain: sensor\n  humidity_level:\n    name: Humidity Threshold\n    description: The humidity level (in %) at which the fan should activate.\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: Fan Entity\n    description: The fan entity to control based on humidity.\n    selector:\n      entity:\n        domain: fan\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_humidity_sensor }}'\n    to: '{{ input_humidity_level }}'\n    condition:\n      - condition: template\n        value_template: '{{ states(input_humidity_sensor) | int > input_humidity_level }}'\n\naction:\n  - service: fan.turn_on\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'off'\n\nelse:\n  - service: fan.turn_off\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'on'\n```","humidity_fan-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"humidity_fan_humidity_fan-humidity_fan-4","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nname: Humidity Fan Control\ndescription: Automates a fan based on humidity levels from a sensor.\ninputs:\n  humidity_sensor:\n    name: Humidity Sensor\n    description: The sensor entity that measures humidity.\n    selector:\n      entity:\n        domain: sensor\n  humidity_level:\n    name: Humidity Threshold\n    description: The humidity level (in %) at which the fan should activate.\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: Fan Entity\n    description: The fan entity to control based on humidity.\n    selector:\n      entity:\n        domain: fan\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_humidity_sensor }}'\n    to: '{{ input_humidity_level }}'\n    condition:\n      - condition: template\n        value_template: '{{ states(input_humidity_sensor) | int > input_humidity_level }}'\n\naction:\n  - service: fan.turn_on\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'off'\n\nelse:\n  - service: fan.turn_off\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'on'\n```","humidity_fan-test_fan_triggered_on","Bad","AssertionError: Unable to load automation."
"humidity_fan_humidity_fan-humidity_fan-4","qwen3-30b-gptq","fan","# Humidity Fan\n\n## Problem statement\n\nCreate a blueprint automation to turn on the fan based on the value of the humidity sensor.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the bathroom exhaust fan when the bathroom humidty is above 60%\n- Make sure the garage does not get too humid\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |\n| `humidity_level` | A `number` selector to set the value used as the trigger. |\n| `fan_entity`     | A `fan` entity to turn on when the automation fires. |\n\nThe automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When\ntriggered, the fan should be turned off. The fan should also be stopped when the\nsensor goes back down below the desired level. The automation should not try to\nturn the fan on if it is already on, and should not turn the fan off when it is\nalready off.\n","","```yaml\nname: Humidity Fan Control\ndescription: Automates a fan based on humidity levels from a sensor.\ninputs:\n  humidity_sensor:\n    name: Humidity Sensor\n    description: The sensor entity that measures humidity.\n    selector:\n      entity:\n        domain: sensor\n  humidity_level:\n    name: Humidity Threshold\n    description: The humidity level (in %) at which the fan should activate.\n    selector:\n      number:\n        min: 0\n        max: 100\n        step: 1\n  fan_entity:\n    name: Fan Entity\n    description: The fan entity to control based on humidity.\n    selector:\n      entity:\n        domain: fan\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_humidity_sensor }}'\n    to: '{{ input_humidity_level }}'\n    condition:\n      - condition: template\n        value_template: '{{ states(input_humidity_sensor) | int > input_humidity_level }}'\n\naction:\n  - service: fan.turn_on\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'off'\n\nelse:\n  - service: fan.turn_off\n    target:\n      entity_id: '{{ input_fan_entity }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_fan_entity }}'\n        to: 'on'\n```","humidity_fan-test_fan_triggered_off","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-0","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ndescription: 'Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    condition:\n      - condition: template\n        value_template: '{{ trigger.event.data.to_state.state == 'on' }}'\n    entity_id: '{{ input_door_sensor }}'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - wait for: '{{ 2 * 60 }} seconds'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_door_sensor }}'\n        state: 'on'\n\nmode: single\n```","light_on_door-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"light_on_door_light_on_door-light_on_door-0","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ndescription: 'Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    condition:\n      - condition: template\n        value_template: '{{ trigger.event.data.to_state.state == 'on' }}'\n    entity_id: '{{ input_door_sensor }}'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - wait for: '{{ 2 * 60 }} seconds'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_door_sensor }}'\n        state: 'on'\n\nmode: single\n```","light_on_door-test_door_open","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-0","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ndescription: 'Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    condition:\n      - condition: template\n        value_template: '{{ trigger.event.data.to_state.state == 'on' }}'\n    entity_id: '{{ input_door_sensor }}'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - wait for: '{{ 2 * 60 }} seconds'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_door_sensor }}'\n        state: 'on'\n\nmode: single\n```","light_on_door-test_door_open_close","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-0","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ndescription: 'Automatically turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\ninput:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntrigger:\n  - platform: state\n    to: 'on'\n    for:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    condition:\n      - condition: template\n        value_template: '{{ trigger.event.data.to_state.state == 'on' }}'\n    entity_id: '{{ input_door_sensor }}'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - wait for: '{{ 2 * 60 }} seconds'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n  - service: light.turn_on\n    target:\n      entity_id: '{{ input_light_switch }}'\n    condition:\n      - condition: state\n        entity_id: '{{ input_door_sensor }}'\n        state: 'on'\n\nmode: single\n```","light_on_door-test_light_timeout","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-1","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Light on door blueprint\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor that triggers the automation when the door opens.'\n      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'One or more light entities to turn on when the door opens.'\n      selector:\n        entity:\n          domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: {{ input.light_switch }}\n  - service: timer.sleep\n    data:\n      seconds: 120\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n\ncondition: []\n```","light_on_door-test_blueprint_inputs","Bad","^,AssertionError: Blueprint was not valid yaml: while constructing a mapping   in '<unicode string>', line 21, column 16:         entity_id: {{ input.door_sensor }}                    ^ found unhashable key   in '<unicode string>', line 21, column 17:         entity_id: {{ input.door_sensor }}                     ^"
"light_on_door_light_on_door-light_on_door-1","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Light on door blueprint\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor that triggers the automation when the door opens.'\n      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'One or more light entities to turn on when the door opens.'\n      selector:\n        entity:\n          domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: {{ input.light_switch }}\n  - service: timer.sleep\n    data:\n      seconds: 120\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n\ncondition: []\n```","light_on_door-test_door_open","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-1","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Light on door blueprint\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor that triggers the automation when the door opens.'\n      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'One or more light entities to turn on when the door opens.'\n      selector:\n        entity:\n          domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: {{ input.light_switch }}\n  - service: timer.sleep\n    data:\n      seconds: 120\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n\ncondition: []\n```","light_on_door-test_door_open_close","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-1","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Light on door blueprint\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'A binary sensor that triggers the automation when the door opens.'\n      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'One or more light entities to turn on when the door opens.'\n      selector:\n        entity:\n          domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - service: light.turn_on\n    target:\n      entity_id: {{ input.light_switch }}\n  - service: timer.sleep\n    data:\n      seconds: 120\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n\ncondition: []\n```","light_on_door-test_light_timeout","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-2","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.pantry_door\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n  triggers:\n    - platform: state\n      entity_id: [[ door_sensor ]]\n      to: 'on'\n  conditions: []\n  actions:\n    - action: turn_on\n      target:\n        entity_id: [[ light_switch ]]\n    - action: delay\n      data:\n        hours: 0\n        minutes: 2\n        seconds: 0\n    - action: turn_off\n      target:\n        entity_id: [[ light_switch ]]\n  variables: {}\n```","light_on_door-test_blueprint_inputs","Good",""
"light_on_door_light_on_door-light_on_door-2","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.pantry_door\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n  triggers:\n    - platform: state\n      entity_id: [[ door_sensor ]]\n      to: 'on'\n  conditions: []\n  actions:\n    - action: turn_on\n      target:\n        entity_id: [[ light_switch ]]\n    - action: delay\n      data:\n        hours: 0\n        minutes: 2\n        seconds: 0\n    - action: turn_off\n      target:\n        entity_id: [[ light_switch ]]\n  variables: {}\n```","light_on_door-test_door_open","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-2","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.pantry_door\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n  triggers:\n    - platform: state\n      entity_id: [[ door_sensor ]]\n      to: 'on'\n  conditions: []\n  actions:\n    - action: turn_on\n      target:\n        entity_id: [[ light_switch ]]\n    - action: delay\n      data:\n        hours: 0\n        minutes: 2\n        seconds: 0\n    - action: turn_off\n      target:\n        entity_id: [[ light_switch ]]\n  variables: {}\n```","light_on_door-test_door_open_close","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-2","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.pantry_door\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n  triggers:\n    - platform: state\n      entity_id: [[ door_sensor ]]\n      to: 'on'\n  conditions: []\n  actions:\n    - action: turn_on\n      target:\n        entity_id: [[ light_switch ]]\n    - action: delay\n      data:\n        hours: 0\n        minutes: 2\n        seconds: 0\n    - action: turn_off\n      target:\n        entity_id: [[ light_switch ]]\n  variables: {}\n```","light_on_door-test_light_timeout","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-3","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ntitle: 'Light on Door'\ndescription: 'Turn on a light when a door opens and turn it off after 2 minutes or when the door closes.'\ngroup: 'Door Light Automation'\nicon: 'mdi:door'\n\ninputs:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntriggers:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    id: door_open\n    entity_id: '{{ input_door_sensor }}'\n\nconditions: []\n\nactions:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'open' }}'\n        sequence:\n          - service: light.turn_on\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'closed' }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n      - conditions:\n          - condition: state\n            state: 'closed'\n            entity_id: '{{ input_door_sensor }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - delay: '00:02:00'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n```","light_on_door-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"light_on_door_light_on_door-light_on_door-3","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ntitle: 'Light on Door'\ndescription: 'Turn on a light when a door opens and turn it off after 2 minutes or when the door closes.'\ngroup: 'Door Light Automation'\nicon: 'mdi:door'\n\ninputs:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntriggers:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    id: door_open\n    entity_id: '{{ input_door_sensor }}'\n\nconditions: []\n\nactions:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'open' }}'\n        sequence:\n          - service: light.turn_on\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'closed' }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n      - conditions:\n          - condition: state\n            state: 'closed'\n            entity_id: '{{ input_door_sensor }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - delay: '00:02:00'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n```","light_on_door-test_door_open","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-3","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ntitle: 'Light on Door'\ndescription: 'Turn on a light when a door opens and turn it off after 2 minutes or when the door closes.'\ngroup: 'Door Light Automation'\nicon: 'mdi:door'\n\ninputs:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntriggers:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    id: door_open\n    entity_id: '{{ input_door_sensor }}'\n\nconditions: []\n\nactions:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'open' }}'\n        sequence:\n          - service: light.turn_on\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'closed' }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n      - conditions:\n          - condition: state\n            state: 'closed'\n            entity_id: '{{ input_door_sensor }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - delay: '00:02:00'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n```","light_on_door-test_door_open_close","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-3","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\ntitle: 'Light on Door'\ndescription: 'Turn on a light when a door opens and turn it off after 2 minutes or when the door closes.'\ngroup: 'Door Light Automation'\nicon: 'mdi:door'\n\ninputs:\n  door_sensor:\n    name: 'Door Sensor'\n    description: 'The binary sensor that detects when the door opens.'\n    selector:\n      entity:\n        domain: binary_sensor\n  light_switch:\n    name: 'Light Switch'\n    description: 'The light(s) to turn on when the door opens.'\n    selector:\n      entity:\n        domain: light\n\ntriggers:\n  - platform: state\n    to: 'open'\n    for:\n      minutes: 0\n    id: door_open\n    entity_id: '{{ input_door_sensor }}'\n\nconditions: []\n\nactions:\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'open' }}'\n        sequence:\n          - service: light.turn_on\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - choose:\n      - conditions:\n          - condition: template\n            value_template: '{{ trigger.to_state.state == 'closed' }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n      - conditions:\n          - condition: state\n            state: 'closed'\n            entity_id: '{{ input_door_sensor }}'\n        sequence:\n          - service: light.turn_off\n            target:\n              entity_id: '{{ input_light_switch }}'\n  - delay: '00:02:00'\n  - service: light.turn_off\n    target:\n      entity_id: '{{ input_light_switch }}'\n```","light_on_door-test_light_timeout","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-4","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Home Assistant Blueprint: Light on door\n# This automation turns on a light when a door opens and turns it off after 2 minutes or when the door closes.\n\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  category: 'automation'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.door_window_sensor_1234\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - choose:\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'on'\n        then:\n          - service: light.turn_on\n            target:\n              entity_id: {{ input.light_switch }}\n          - service: input_boolean.set\n            target:\n              entity_id: input_door_light_timeout\n            data:\n              value: true\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'off'\n        then:\n          - service: light.turn_off\n            target:\n              entity_id: {{ input.light_switch }}\n    else:\n      - service: light.turn_off\n        target:\n          entity_id: {{ input.light_switch }}\n  - delay:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    id: timeout_delay\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n```","light_on_door-test_blueprint_inputs","Bad","^,AssertionError: Blueprint was not valid yaml: while constructing a mapping   in '<unicode string>', line 24, column 16:         entity_id: {{ input.door_sensor }}                    ^ found unhashable key   in '<unicode string>', line 24, column 17:         entity_id: {{ input.door_sensor }}                     ^"
"light_on_door_light_on_door-light_on_door-4","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Home Assistant Blueprint: Light on door\n# This automation turns on a light when a door opens and turns it off after 2 minutes or when the door closes.\n\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  category: 'automation'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.door_window_sensor_1234\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - choose:\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'on'\n        then:\n          - service: light.turn_on\n            target:\n              entity_id: {{ input.light_switch }}\n          - service: input_boolean.set\n            target:\n              entity_id: input_door_light_timeout\n            data:\n              value: true\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'off'\n        then:\n          - service: light.turn_off\n            target:\n              entity_id: {{ input.light_switch }}\n    else:\n      - service: light.turn_off\n        target:\n          entity_id: {{ input.light_switch }}\n  - delay:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    id: timeout_delay\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n```","light_on_door-test_door_open","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-4","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Home Assistant Blueprint: Light on door\n# This automation turns on a light when a door opens and turns it off after 2 minutes or when the door closes.\n\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  category: 'automation'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.door_window_sensor_1234\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - choose:\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'on'\n        then:\n          - service: light.turn_on\n            target:\n              entity_id: {{ input.light_switch }}\n          - service: input_boolean.set\n            target:\n              entity_id: input_door_light_timeout\n            data:\n              value: true\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'off'\n        then:\n          - service: light.turn_off\n            target:\n              entity_id: {{ input.light_switch }}\n    else:\n      - service: light.turn_off\n        target:\n          entity_id: {{ input.light_switch }}\n  - delay:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    id: timeout_delay\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n```","light_on_door-test_door_open_close","Bad","AssertionError: Unable to load automation."
"light_on_door_light_on_door-light_on_door-4","qwen3-30b-gptq","light","# Light on door\n\n## Problem statement\n\nCreate an blueprint automation to turn on a light when the door opens.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Turn on the pantry light when the pantry door opens\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input          | Description                                                                     |\n| -------------- | ------------------------------------------------------------------------------- |\n| `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |\n| `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |\n\nThe automation should trigger when the door opens, and turn the light on. The\nlight should be shut off when the door closes or after a 2 minute timeout.\n","","```yaml\n# Home Assistant Blueprint: Light on door\n# This automation turns on a light when a door opens and turns it off after 2 minutes or when the door closes.\n\nblueprint:\n  name: 'Light on door'\n  description: 'Turns on a light when a door opens and turns it off after 2 minutes or when the door closes.'\n  category: 'automation'\n  input:\n    door_sensor:\n      name: 'Door Sensor'\n      description: 'The binary sensor that detects when the door opens.'\n      example: binary_sensor.door_window_sensor_1234\n      type: entity\n      domain: binary_sensor\n    light_switch:\n      name: 'Light Switch'\n      description: 'The light(s) to turn on when the door opens.'\n      example: light.pantry_light\n      type: entity\n      domain: light\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.door_sensor }}\n    to: 'on'\n\naction:\n  - choose:\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'on'\n        then:\n          - service: light.turn_on\n            target:\n              entity_id: {{ input.light_switch }}\n          - service: input_boolean.set\n            target:\n              entity_id: input_door_light_timeout\n            data:\n              value: true\n      - conditions:\n          - condition: state\n            entity_id: {{ input.door_sensor }}\n            to: 'off'\n        then:\n          - service: light.turn_off\n            target:\n              entity_id: {{ input.light_switch }}\n    else:\n      - service: light.turn_off\n        target:\n          entity_id: {{ input.light_switch }}\n  - delay:\n      hours: 0\n      minutes: 2\n      seconds: 0\n    id: timeout_delay\n  - service: light.turn_off\n    target:\n      entity_id: {{ input.light_switch }}\n```","light_on_door-test_light_timeout","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-0","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\ninput:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'A binary_sensor entity that triggers when a phone call is received.'\n    default: binary_sensor.phone_call\n    required: true\n    type: entity_id\n    domain: binary_sensor\n\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'A vacuum entity to pause when the automation fires.'\n    default: vacuum.vacuum_robot\n    required: true\n    type: entity_id\n    domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input.vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input.vacuum_entity }}\n```","vacuum_pause-test_blueprint_inputs","Bad","^,AssertionError: Blueprint was not valid yaml: while constructing a mapping   in '<unicode string>', line 23, column 16:         entity_id: {{ input.phone_call_sensor }}                    ^ found unhashable key   in '<unicode string>', line 23, column 17:         entity_id: {{ input.phone_call_sensor }}                     ^"
"vacuum_pause_vacuum_pause-vacuum_pause-0","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\ninput:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'A binary_sensor entity that triggers when a phone call is received.'\n    default: binary_sensor.phone_call\n    required: true\n    type: entity_id\n    domain: binary_sensor\n\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'A vacuum entity to pause when the automation fires.'\n    default: vacuum.vacuum_robot\n    required: true\n    type: entity_id\n    domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input.vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input.vacuum_entity }}\n```","vacuum_pause-test_vacuum_running_and_paused","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-0","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\ninput:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'A binary_sensor entity that triggers when a phone call is received.'\n    default: binary_sensor.phone_call\n    required: true\n    type: entity_id\n    domain: binary_sensor\n\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'A vacuum entity to pause when the automation fires.'\n    default: vacuum.vacuum_robot\n    required: true\n    type: entity_id\n    domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: {{ input.phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input.vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input.vacuum_entity }}\n```","vacuum_pause-test_vacuum_not_changed_when_idle","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-1","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\ntrigger:\n  - platform: state\n    entity_id: {{ input_phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input_vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input_vacuum_entity }}\n    data: {}\n```","vacuum_pause-test_blueprint_inputs","Bad","^,AssertionError: Blueprint was not valid yaml: while constructing a mapping   in '<unicode string>', line 3, column 16:         entity_id: {{ input_phone_call_sensor }}                    ^ found unhashable key   in '<unicode string>', line 3, column 17:         entity_id: {{ input_phone_call_sensor }}                     ^"
"vacuum_pause_vacuum_pause-vacuum_pause-1","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\ntrigger:\n  - platform: state\n    entity_id: {{ input_phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input_vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input_vacuum_entity }}\n    data: {}\n```","vacuum_pause-test_vacuum_running_and_paused","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-1","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\ntrigger:\n  - platform: state\n    entity_id: {{ input_phone_call_sensor }}\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: {{ input_vacuum_entity }}\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: {{ input_vacuum_entity }}\n    data: {}\n```","vacuum_pause-test_vacuum_not_changed_when_idle","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-2","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\ninput_phone_call_sensor:\n  name: 'Phone Call Sensor'\n  description: 'A binary sensor entity that triggers when a phone call is received.'\n  type: string\n  default: 'binary_sensor.phone_call'\n\ninput_vacuum_entity:\n  name: 'Vacuum Entity'\n  description: 'A vacuum entity to pause when the automation fires.'\n  type: string\n  default: 'vacuum.my_vacuum'\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n```","vacuum_pause-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"vacuum_pause_vacuum_pause-vacuum_pause-2","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\ninput_phone_call_sensor:\n  name: 'Phone Call Sensor'\n  description: 'A binary sensor entity that triggers when a phone call is received.'\n  type: string\n  default: 'binary_sensor.phone_call'\n\ninput_vacuum_entity:\n  name: 'Vacuum Entity'\n  description: 'A vacuum entity to pause when the automation fires.'\n  type: string\n  default: 'vacuum.my_vacuum'\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n```","vacuum_pause-test_vacuum_running_and_paused","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-2","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\ninput_phone_call_sensor:\n  name: 'Phone Call Sensor'\n  description: 'A binary sensor entity that triggers when a phone call is received.'\n  type: string\n  default: 'binary_sensor.phone_call'\n\ninput_vacuum_entity:\n  name: 'Vacuum Entity'\n  description: 'A vacuum entity to pause when the automation fires.'\n  type: string\n  default: 'vacuum.my_vacuum'\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n```","vacuum_pause-test_vacuum_not_changed_when_idle","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-3","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\nname: 'Pause Vacuum on Phone Call'\ndescription: 'Pauses the vacuum when a phone call is received.'\nhelp: 'This automation pauses the vacuum when the specified phone call sensor is triggered and the vacuum is running.'\n\ninputs:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'The binary sensor that triggers when a phone call is received.'\n    selector:\n      entity:\n        domain: binary_sensor\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'The vacuum entity to pause when the phone call is detected.'\n    selector:\n      entity:\n        domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n    data: {}\n\nmode: single\n```","vacuum_pause-test_blueprint_inputs","Bad","AssertionError: Blueprint yaml did not contain 'blueprint:' key"
"vacuum_pause_vacuum_pause-vacuum_pause-3","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\nname: 'Pause Vacuum on Phone Call'\ndescription: 'Pauses the vacuum when a phone call is received.'\nhelp: 'This automation pauses the vacuum when the specified phone call sensor is triggered and the vacuum is running.'\n\ninputs:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'The binary sensor that triggers when a phone call is received.'\n    selector:\n      entity:\n        domain: binary_sensor\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'The vacuum entity to pause when the phone call is detected.'\n    selector:\n      entity:\n        domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n    data: {}\n\nmode: single\n```","vacuum_pause-test_vacuum_running_and_paused","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-3","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\n# Vacuum Pause Blueprint\n# This automation pauses a vacuum when a phone call is detected\n\nname: 'Pause Vacuum on Phone Call'\ndescription: 'Pauses the vacuum when a phone call is received.'\nhelp: 'This automation pauses the vacuum when the specified phone call sensor is triggered and the vacuum is running.'\n\ninputs:\n  phone_call_sensor:\n    name: 'Phone Call Sensor'\n    description: 'The binary sensor that triggers when a phone call is received.'\n    selector:\n      entity:\n        domain: binary_sensor\n  vacuum_entity:\n    name: 'Vacuum Entity'\n    description: 'The vacuum entity to pause when the phone call is detected.'\n    selector:\n      entity:\n        domain: vacuum\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input_phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input_vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input_vacuum_entity }}'\n    data: {}\n\nmode: single\n```","vacuum_pause-test_vacuum_not_changed_when_idle","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-4","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\nhomeassistant:\n  name: Vacuum Pause Automation\n\nblueprint:\n  name: 'Pause vacuum when phone call is received'\n  description: 'Pauses the vacuum when a phone call is received, based on a binary sensor trigger.'\n  input:\n    phone_call_sensor:\n      name: 'Phone Call Sensor'\n      description: 'A binary sensor that triggers when a phone call is received.'\n      selector:\n        binary_sensor: {}\n    vacuum_entity:\n      name: 'Vacuum Entity'\n      description: 'The vacuum entity to pause when the phone call is received.'\n      selector:\n        vacuum: {}\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input.phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input.vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input.vacuum_entity }}'\n```","vacuum_pause-test_blueprint_inputs","Good",""
"vacuum_pause_vacuum_pause-vacuum_pause-4","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\nhomeassistant:\n  name: Vacuum Pause Automation\n\nblueprint:\n  name: 'Pause vacuum when phone call is received'\n  description: 'Pauses the vacuum when a phone call is received, based on a binary sensor trigger.'\n  input:\n    phone_call_sensor:\n      name: 'Phone Call Sensor'\n      description: 'A binary sensor that triggers when a phone call is received.'\n      selector:\n        binary_sensor: {}\n    vacuum_entity:\n      name: 'Vacuum Entity'\n      description: 'The vacuum entity to pause when the phone call is received.'\n      selector:\n        vacuum: {}\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input.phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input.vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input.vacuum_entity }}'\n```","vacuum_pause-test_vacuum_running_and_paused","Bad","AssertionError: Unable to load automation."
"vacuum_pause_vacuum_pause-vacuum_pause-4","qwen3-30b-gptq","vacuum","# Vacuum Pause\n\n## Problem statement\n\nCreate a blueprint automation to pause the vacuum when I receive a phone call.\n\n## Example use cases\n\nThese are example use cases that could be used with the blueprint:\n\n- Pause the vacuum when I get a phone call from my relatives\n- Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts\n\n## Detailed Description\n\nThe blueprint should accept two inputs:\n\n| Input               | Description                                                           |\n| ------------------- | --------------------------------------------------------------------- |\n| `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |\n| `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |\n\nThe automation should trigger when the binary sensor fires and the vacuum is running. The vacuum\nshould be paused (not stopped) and can be resumed manually.\n","","```yaml\nhomeassistant:\n  name: Vacuum Pause Automation\n\nblueprint:\n  name: 'Pause vacuum when phone call is received'\n  description: 'Pauses the vacuum when a phone call is received, based on a binary sensor trigger.'\n  input:\n    phone_call_sensor:\n      name: 'Phone Call Sensor'\n      description: 'A binary sensor that triggers when a phone call is received.'\n      selector:\n        binary_sensor: {}\n    vacuum_entity:\n      name: 'Vacuum Entity'\n      description: 'The vacuum entity to pause when the phone call is received.'\n      selector:\n        vacuum: {}\n\ntrigger:\n  - platform: state\n    entity_id: '{{ input.phone_call_sensor }}'\n    to: 'on'\n\ncondition:\n  - condition: state\n    entity_id: '{{ input.vacuum_entity }}'\n    state: 'running'\n\naction:\n  - service: vacuum.pause\n    target:\n      entity_id: '{{ input.vacuum_entity }}'\n```","vacuum_pause-test_vacuum_not_changed_when_idle","Bad","AssertionError: Unable to load automation."
